@startuml

autonumber

title 基本下载任务时序图

actor 用户
用户 -> 开始下载: 提交下载任务



activate 开始下载

	开始下载 -> 文件本来已经存在: 文件本来已经存在
	note right of 文件本来已经存在 #00ff00
        结束下载
    end note
	开始下载 -> 进行下载: 开始下载

deactivate 开始下载

activate 进行下载

	进行下载 -> 进行下载: 网络请求
	进行下载 -> 下载失败: 请求失败
	activate 下载失败
	note right of 下载失败 #ff00ff
        结束下载
    end note
	deactivate 下载失败

	进行下载 -> 进行下载: 将网络流写入到文件
	进行下载 -> 下载失败: 出现异常(可能网络关闭了)
	activate 下载失败
	note right of 下载失败 #ff00ff
        结束下载
    end note
    deactivate 下载失败

	进行下载 -> 下载成功: 下载完毕

deactivate 进行下载


activate 下载成功
	note right of 下载成功 #00ff00
        结束下载
    end note
deactivate 下载成功

control 观察者管理器

'============================================================================================

newpage 优化基本下载任务时序图

用户 -> 开始下载: 提交下载任务

activate 开始下载

'	alt 任务有效性检查
		开始下载 -> 开始下载: 任务有效性检查
		note right of 开始下载
			1. 参数检查,下载地址是否正确之类的
		end note
'	else 任务无效
		开始下载 -> 下载失败: 任务无效
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(任务无效)
		deactivate 下载失败
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

'	alt 本地文件有效性检查
		开始下载 -> 开始下载: 本地文件有效性检查
		note right of 开始下载
			1. 检查文件是否存在,存在就直接进入下载成功的逻辑
			2. 文件存在,文件有效性检查,是否被篡改了如果是的话,就删除,重新下载,否则采用断点下载
			3. 文件不存在,需要重新下载
			4. 重新下载之前需要检查
				1. 可能存储目录的空间不足
				2. 权限问题
				3. 目标路径是文件之类的
				4. 实现文件目录系统功能
					1. 下载文件设置缓存时间,每次使用本目录之前先清除过期文件
					2. 下载目录设置体积大小,下载之前如果目录已经超过最大体积应该先清空一些数据
		end note
'	else 下载最终文件存在
		开始下载 -> 文件本来已经存在: 进入下载成功流程检查文件是否有效
'		group 文件有效性检查
			activate 文件本来已经存在
			文件本来已经存在 -> 文件本来已经存在: 文件有效性检查
			note right of 文件本来已经存在
				1. 可以通过下载任务中传入进来的md5值进行匹配
				2. 可以通过请求服务器查询这个文件的md5之类进行检查
				3. ...
			end note
'			文件本来已经存在 -->> 观察者管理器: 回调文件本来已经存在
			note right of 文件本来已经存在 #00ff00
	                结束下载
	            end note
            deactivate 文件本来已经存在
'            观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'		else 文件无效
			文件本来已经存在 -> 开始下载: 删除已有的最终下载本地文件,重新下载
'		end



'	else 下载缓存文件存在
		开始下载 -> 开始下载: 下载缓存文件被篡改过,重置文件,然后重新下载

'	else 目录无效
		开始下载 -> 下载失败: 目录无效
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(目录无效)
		deactivate 下载失败
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

'	alt 开始下载
'		开始下载 -->> 观察者管理器: 回调开始下载
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

	开始下载 -> 进行下载: 开始下载
deactivate 开始下载

activate 进行下载



'	alt 网络请求
		进行下载 -> 进行下载: 网络请求
'	else 请求失败
		进行下载 -> 下载失败: 请求失败
		activate 下载失败
		note right of 下载失败 #ff00ff
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(请求失败)
		deactivate 下载失败
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

'	alt 写入流到本地文件
		进行下载 -> 进行下载: 将网络流写入到文件
'		...每隔1秒钟(时间可以自定义)...
'		进行下载 -->> 观察者管理器: 通知文件当前下载进度
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'		...每隔1秒钟(时间可以自定义)...
'		进行下载 -->> 观察者管理器: 通知文件当前下载进度
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'		...
'	else 出现异常
		进行下载 -> 下载失败: 出现异常(可能网络关闭了)
		activate 下载失败
		note right of 下载失败 #ff00ff
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(异常)
        deactivate 下载失败
'        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

	进行下载 -> 下载成功: 下载完毕

deactivate 进行下载


activate 下载成功
'	alt 下载文件检查
		下载成功 -> 下载成功: 文件有效性检查
		note right of 下载成功
			1. 可以通过下载任务中传入进来的md5值进行匹配
			2. 可以通过请求服务器查询这个文件的md5之类进行检查
			3. ...
		end note
'		下载成功 -->> 观察者管理器: 文件有效,下载成功
		note right of 下载成功 #00ff00
            结束下载
        end note
'        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	else 文件无效
		下载成功 -> 下载成功: 文件无效,删除已有的最终下载本地文件
		下载成功 -> 下载失败: 转到下载失败
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(文件下载成功后校验不通过)
        deactivate 下载失败
'        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

deactivate 下载成功

'============================================================================================

newpage 优化基本下载任务时序图(模块化)

用户 -> 开始下载: 提交下载任务

activate 开始下载

	alt 任务有效性检查
		开始下载 -> 开始下载: 任务有效性检查
		note right of 开始下载
			1. 参数检查,下载地址是否正确之类的
		end note
	else 任务无效
		开始下载 -> 下载失败: 任务无效
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(任务无效)
		deactivate 下载失败
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	alt 本地文件有效性检查
		开始下载 -> 开始下载: 本地文件有效性检查
		note right of 开始下载
			1. 检查文件是否存在,存在就直接进入下载成功的逻辑
			2. 文件存在,文件有效性检查,是否被篡改了如果是的话,就删除,重新下载,否则采用断点下载
			3. 文件不存在,需要重新下载
			4. 重新下载之前需要检查
				1. 可能存储目录的空间不足
				2. 权限问题
				3. 目标路径是文件之类的
				4. 实现文件目录系统功能
					1. 下载文件设置缓存时间,每次使用本目录之前先清除过期文件
					2. 下载目录设置体积大小,下载之前如果目录已经超过最大体积应该先清空一些数据
		end note
	else 下载最终文件存在
		开始下载 -> 文件本来已经存在: 进入下载成功流程检查文件是否有效
		group 文件有效性检查
			activate 文件本来已经存在
			文件本来已经存在 -> 文件本来已经存在: 文件有效性检查
			note right of 文件本来已经存在
				1. 可以通过下载任务中传入进来的md5值进行匹配
				2. 可以通过请求服务器查询这个文件的md5之类进行检查
				3. ...
			end note
'			文件本来已经存在 -->> 观察者管理器: 回调文件本来已经存在
			note right of 文件本来已经存在 #00ff00
	                结束下载
	            end note
            deactivate 文件本来已经存在
'            观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
		else 文件无效
			文件本来已经存在 -> 开始下载: 删除已有的最终下载本地文件,重新下载
		end



	else 下载缓存文件存在
		开始下载 -> 开始下载: 下载缓存文件被篡改过,重置文件,然后重新下载

	else 目录无效
		开始下载 -> 下载失败: 目录无效
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(目录无效)
		deactivate 下载失败
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

'	alt 开始下载
'		开始下载 -->> 观察者管理器: 回调开始下载
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'	end

	开始下载 -> 进行下载: 开始下载
deactivate 开始下载

activate 进行下载



	alt 网络请求
		进行下载 -> 进行下载: 网络请求
	else 请求失败
		进行下载 -> 下载失败: 请求失败
		activate 下载失败
		note right of 下载失败 #ff00ff
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(请求失败)
		deactivate 下载失败
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	alt 写入流到本地文件
		进行下载 -> 进行下载: 将网络流写入到文件
'		...每隔1秒钟(时间可以自定义)...
'		进行下载 -->> 观察者管理器: 通知文件当前下载进度
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'		...每隔1秒钟(时间可以自定义)...
'		进行下载 -->> 观察者管理器: 通知文件当前下载进度
'		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
'		...
	else 出现异常
		进行下载 -> 下载失败: 出现异常(可能网络关闭了)
		activate 下载失败
		note right of 下载失败 #ff00ff
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(异常)
        deactivate 下载失败
'        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	进行下载 -> 下载成功: 下载完毕

deactivate 进行下载


activate 下载成功
	alt 下载文件检查
		下载成功 -> 下载成功: 文件有效性检查
		note right of 下载成功
			1. 可以通过下载任务中传入进来的md5值进行匹配
			2. 可以通过请求服务器查询这个文件的md5之类进行检查
			3. ...
		end note
'		下载成功 -->> 观察者管理器: 文件有效,下载成功
		note right of 下载成功 #00ff00
            结束下载
        end note
'        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	else 文件无效
		下载成功 -> 下载成功: 文件无效,删除已有的最终下载本地文件
		下载成功 -> 下载失败: 转到下载失败
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
'		下载失败 -->> 观察者管理器: 回调下载失败(文件下载成功后校验不通过)
        deactivate 下载失败
'        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

deactivate 下载成功


'============================================================================================


newpage 完整下载任务时序图(支持回调)

用户 -> 开始下载: 提交下载任务

activate 开始下载

	alt 任务有效性检查
		开始下载 -> 开始下载: 任务有效性检查
		note right of 开始下载
			1. 参数检查,下载地址是否正确之类的
		end note
	else 任务无效
		开始下载 -> 下载失败: 任务无效
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
		下载失败 -->> 观察者管理器: 回调下载失败(任务无效)
		deactivate 下载失败
		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	alt 本地文件有效性检查
		开始下载 -> 开始下载: 本地文件有效性检查
		note right of 开始下载
			1. 检查文件是否存在,存在就直接进入下载成功的逻辑
			2. 文件存在,文件有效性检查,是否被篡改了如果是的话,就删除,重新下载,否则采用断点下载
			3. 文件不存在,需要重新下载
			4. 重新下载之前需要检查
				1. 可能存储目录的空间不足
				2. 权限问题
				3. 目标路径是文件之类的
				4. 实现文件目录系统功能
					1. 下载文件设置缓存时间,每次使用本目录之前先清除过期文件
					2. 下载目录设置体积大小,下载之前如果目录已经超过最大体积应该先清空一些数据
		end note
	else 下载最终文件存在
		开始下载 -> 文件本来已经存在: 进入下载成功流程检查文件是否有效
		group 文件有效性检查
			activate 文件本来已经存在
			文件本来已经存在 -> 文件本来已经存在: 文件有效性检查
			note right of 文件本来已经存在
				1. 可以通过下载任务中传入进来的md5值进行匹配
				2. 可以通过请求服务器查询这个文件的md5之类进行检查
				3. ...
			end note
			文件本来已经存在 -->> 观察者管理器: 回调文件本来已经存在
			note right of 文件本来已经存在 #00ff00
	                结束下载
	            end note
            deactivate 文件本来已经存在
            观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
		else 文件无效
			文件本来已经存在 -> 开始下载: 删除已有的最终下载本地文件,重新下载
		end



	else 下载缓存文件存在
		开始下载 -> 开始下载: 下载缓存文件被篡改过,重置文件,然后重新下载

	else 目录无效
		开始下载 -> 下载失败: 目录无效
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
		下载失败 -->> 观察者管理器: 回调下载失败(目录无效)
		deactivate 下载失败
		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	alt 开始下载
		开始下载 -->> 观察者管理器: 回调开始下载
		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	开始下载 -> 进行下载: 开始下载
deactivate 开始下载

activate 进行下载



	alt 网络请求
		进行下载 -> 进行下载: 网络请求
	else 请求失败
		进行下载 -> 下载失败: 请求失败
		activate 下载失败
		note right of 下载失败 #ff00ff
            结束下载
        end note
		下载失败 -->> 观察者管理器: 回调下载失败(请求失败)
		deactivate 下载失败
		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	alt 写入流到本地文件
		进行下载 -> 进行下载: 将网络流写入到文件
		...每隔1秒钟(时间可以自定义)...
		进行下载 -->> 观察者管理器: 通知文件当前下载进度
		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
		...每隔1秒钟(时间可以自定义)...
		进行下载 -->> 观察者管理器: 通知文件当前下载进度
		观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
		...
	else 出现异常
		进行下载 -> 下载失败: 出现异常(可能网络关闭了)
		activate 下载失败
		note right of 下载失败 #ff00ff
            结束下载
        end note
		下载失败 -->> 观察者管理器: 回调下载失败(异常)
        deactivate 下载失败
        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

	进行下载 -> 下载成功: 下载完毕

deactivate 进行下载


activate 下载成功
	alt 下载文件检查
		下载成功 -> 下载成功: 文件有效性检查
		note right of 下载成功
			1. 可以通过下载任务中传入进来的md5值进行匹配
			2. 可以通过请求服务器查询这个文件的md5之类进行检查
			3. ...
		end note
		下载成功 -->> 观察者管理器: 文件有效,下载成功
		note right of 下载成功 #00ff00
            结束下载
        end note
        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	else 文件无效
		下载成功 -> 下载成功: 文件无效,删除已有的最终下载本地文件
		下载成功 -> 下载失败: 转到下载失败
		activate 下载失败
		note right of 下载失败 #ff0000
            结束下载
        end note
		下载失败 -->> 观察者管理器: 回调下载失败(文件下载成功后校验不通过)
        deactivate 下载失败
        观察者管理器 -> 观察者管理器: 通知各个观察者最新的下载状态
	end

deactivate 下载成功

control 观察者管理器

legend center

思考

	1. 耦合性太高,不利于维护
	2. 如果还需要做额外的功能,比如多进程下载监听,那么是不是说还要加在上面?没有尽头的感觉~~~
	3. 打开autonumber 看看有多少步?
	4. 还没有实现失败重试机制呢~
	5. 回调的时候 实线还是虚线

endlegend

@enduml